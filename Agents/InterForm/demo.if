<!doctype html public "-//IETF//DTD HTML//EN//2.0">
<html><head>
<title>Standard Tagset Examples</title>
<link rev="made" href="mailto:steve@crc.ricoh.com">
</head><body bgcolor="#ffffff" link="#c40026" vlink="#e40026">

<if><get name=agentName>
<then>
<!-- normal mode; running from the InterForm agent. -->
<set entity name=title>&agentName; Agent<br>Actor Demonstration Page</set>
<read interform file="heading.inc" process>

<set entity name=IFman>/PIA/Doc/Manuals/InterForm/index.html</set>
<set entity name=IFtags>tag_man.if</set>
<table cellspacing=0 cellpadding=0 border=0>
<tr><th width=170 valign=center>
<td>
  <table cellspacing=0 cellpadding=0 border=0>
    <tr><th width=170><img src="/Icon/blank170x1.gif"
	                   width=170 height=1></th><td>
    <tr><th align=right>
	    <td> <a href="home.if">Home</a>
    		 <a href="index.if">Index</a>
    		 <a href="help.if">Help</a>
    		 <a href="options.if">Options</a>
    <tr><th><td> <a href=actors.if>Actors</a>
		 <a href=entities>Entities</a>
		 <a href="/Admin/list-agents">Agents</a>
    <tr><th align=right><td> <a href="tag_man.if">Standard Tagset Manual</a>
    <tr><th align=right><img src="/Icon/dot-blue.gif"
			     height=20 width=20 alt="*">
            <td> <b href=demo.if>Standard Tagset Examples</b>
    <tr><th><td> <a href="&IFman;">PIA InterForm Manual</a>
  </table>
</table>
</then>
<else>
<!-- We are running this page through iffilter to make the tagset examples -->
<!-- WARNING! This document is automatically generated.  DO NOT EDIT. -->
<set entity name=IFman>index.html</set>
<set entity name=IFtags>tag_man.html</set>
<h1>Standard Tagset Examples</h1>
</else>
</if>

<h3>About This document:</h3>

This page is intended eventually to have a <em>complete</em> set of examples
illustrating every feature of every InterForm actor in the Standard Tagset,
along with a brief description.  Every example is cross-linked to the
corresponding entry in the <a href="&IFtags;">Standard Tagset Manual</a>,
which is part of the <a href="&IFman">InterForm Manual</a>.
<p>


<h3>Actors</h3>
<!-- note that we must define actorNames in front of the local actor defs. -->

<set name=actorNames><actor-names></set>
<repeat list="&actorNames;">
  <if><actor-dscr name="&li;"><then> <a href="#&li;">&li;</a>
</repeat>

<h3>Elements</h3>
<repeat list="&actorNames;">
  <if><actor-dscr name="&li;"><else> &li;
</repeat>

<!-- Define some utility actors, used mainly for layout: -->

<!-- The man page, and actor names linked to it -->
<set entity name=IFman>/PIA/Doc/Manuals/InterForm/index.html</set>
<actor tag=man dscr="Link an actor name to the manual">
  <set entity name=content><get name=content></set>
  <a href="&IFman;#&content;">&content;</a>
</actor>
<actor tag=atag dscr="``tag'' for actor named in CONTENT">
  <set entity name=n><get name=content></set>
  <set entity name=tag><if><actor-dscr name="&n;">
	<then>actor</then><else>element</else></if></set>
  &lt;&tag; <actor-attrs name="&n;"> &gt;
</actor>

<!-- Name anchors in THIS page, and links to them. -->
<actor tag=toc dscr="Link an actor name to this page">
  <set entity name=content><get name=content></set>
  <a href="#&content;">&content;</a>
</actor>

<actor tag=name dscr="Make a name anchor">
  <set entity name=content><get name=content></set>
  <a name="&content;">&content;</a>
</actor>
<actor tag=atoc dscr="``tag'' for actor named in CONTENT">
  <set entity name=n><get name=content></set>
  <strong><toc>&n;</toc></strong> -- <atag>&n;</atag>
</actor>

<actor tag=adscr dscr="Make an actor description
cross-referenced to the manual.">
  <set entity name=name><get name=content></set>
  <h3><a name="&name;">&name;</a></h3>
  <dl>
    <dt> <b>Syntax:</b>
    <dd> <add-markup><actor-syntax name="&name;"></add-markup>
    <dt> <b>Description:</b>
    <dd> <add-markup><actor-dscr name="&name;"></add-markup>
    <dt> <b>Definition:</b>
    <dd> &lt;actor <actor-attrs name="&name;">&gt;
    <dt> <b>See Also:</b>
    <dd> <a href="&IFtags;#&name;">Manual entry</a>
  </dl>
</actor>
<actor tag=alist dscr="Make a list of actor tags">
  <set entity name=list><get name=content></set>
<ul foreach list="&list;">
    <li> <atoc>&li;</atoc>
</ul>
</actor>

 
<hr> <!-- ========================================================== -->
<h2>Actor Definition and Control</h2>
<alist>actor  actor-attrs actor-doc actor-dscr actor-names actor-syntax
element</alist>

<adscr>actor</adscr>
  
<pre><protect markup>
<actor tag=demo quoted=1 dscr="show both CONTENT and its value"
  syntax="<demo>code to demonstrate</demo>">
  <protect-result markup><get name=content></protect-result> <b>=&gt;</b> 
  <expand><get name=content></expand>
</actor>
</protect></pre>

<actor tag=demo quoted=1 dscr="show both CONTENT and its value"
  syntax="<demo>code to demonstrate</demo>">
  <protect-result markup><get name=content></protect-result> <b>=&gt;</b> 
  <expand> `<get name=content>' </expand>
</actor>

<actor tag=fake quoted=1 dscr="show CONTENT; allow value to be faked"
  syntax="<fake>code to demonstrate</fake>">
  <protect-result markup><get name=content></protect-result> <b>=&gt;</b> 
</actor>

<adscr>demo</adscr>

<demo><demo><get name="piaUSER"></demo></demo>
<p>

<adscr>actor-attrs</adscr>

<dl>
  <dt> <demo><actor-attrs name=demo></demo>
  <dd> 
</dl>

<adscr>actor-doc</adscr>

<adscr>actor-dscr</adscr>

<dl>
  <dt> <demo><actor-dscr name=demo></demo>
  <dd> 
</dl>

<adscr>actor-names</adscr>

<adscr>actor-syntax</adscr>

<adscr>element</adscr>

<hr> <!-- ========================================================== -->
<h2><a name="expansion">Expansion Control</a></h2>
<alist>expand process protect protect-result</alist>

<adscr>expand</adscr>

<dl>
  <dt> 
  <dd> 
</dl>

<adscr>process</adscr>

<dl>
  <dt> 
  <dd> 
</dl>

<adscr>protect</adscr>

<dl>
  <dt> 
  <dd>
</dl>

<adscr>protect-result</adscr>

<dl>
  <dt> 
  <dd> 
</dl>

<hr> <!-- ========================================================== -->
<h2>Name Bindings</h2>

<alist>get set</alist>

<adscr>get</adscr>
  
<dl>
  <dt> <demo><set name="foo">foo</set></demo>
  <dd> 
  <dt> <demo><get name="foo"></demo>
  <dd> 
  <dt> <demo>&foo;</demo>
  <dd> names defined with &lt;set&gt; are accessible both with &lt;get&gt; and
       with entity references.
  <dt> <demo><code attribute=value><get element name=attribute></code></demo>
  <dd>
  <dt> <demo><get entity name=filePath></demo>
  <dd> 
</dl>

<adscr>set</adscr>

<dl>
  <dt> <demo><set entity name=foo><ul><li>1<li>2</ul></set></demo><br>
  	<demo><get entity name=foo></demo>
  <dd> Entities can include markup.
  <dt> <demo>--&foo;--</demo>
  <dd> This looks like a string to the tokenizer.  Note the leading and
       trailing text.
</dl>

<hr> <!-- ========================================================== -->
<h2>Control Structure</h2>

<alist>if then else foreach -foreach- repeat</alist>

<adscr>if</adscr>

<dl>
  <dt> <demo><if><then>true</then><else>false</else></if></demo>
  <dd> 
  <dt> <demo><if>xxx<then>true</then><else>false</else></if></demo>
  <dd> 
  <dt> <demo><if><test> </test><then>true</then><else>false</else></if></demo>
  <dd>
  <dt> <demo>
        <if><test>xxx</test><then>true</then><else>false</else></if></demo>
  <dd> 
</dl>

<adscr>foreach</adscr>

<dl>
  <dt> <demo><foreach list="a b c">&li; &li; </foreach></demo>
  <dd> 
  <dt> <demo><foreach list="a b c" entity="foo">&foo;</foreach></demo>
  <dd> 
  <dt> <demo><foreach list="a b c">&li;<foreach list="d e f">&li;</> </></demo>
  <dd> 
  <dt> <demo><set entity name=foo><ul><li>1<li>2</ul></set></demo><br>
       <demo><foreach list="&foo;">&li;--</foreach></demo>
  <dd> 
  <dt> <demo><set entity name=foo><li>1<li>2</set></demo><br>
       <demo><foreach list="&foo;">&li;--</foreach></demo>
  <dd> 
</dl>

<adscr>-foreach-</adscr>

<demo><ol foreach list="a b c"><li> &li;</ol></demo>
<demo><em foreach list="a b c"> &li;</em></demo>
<dl>
  <dt> 
  <dd> when foreach is an <em>attribute</em> the entire matching element
       is returned, with the content repeated.
</dl>

<adscr>repeat</adscr>

<dl>
  <dt> at the moment repeat is just a synonym for foreach.
  <dd> 
</dl>
<dl>
  <dt> <demo><repeat list="a b c">&li; &li; </repeat></demo>
  <dd> 
  <dt> <demo><repeat list="a b c" entity="foo">&foo;</repeat></demo>
  <dd> 
  <dt> <demo><repeat list="a b c">&li;<repeat list="d e f">&li;</> </></demo>
  <dd> 
  <dt> <demo><set entity name=foo><ul><li>1<li>2</ul></set></demo><br>
       <demo><repeat list="&foo;">&li;--</repeat></demo>
  <dd> 
  <dt> <demo><set entity name=foo><li>1<li>2</set></demo><br>
       <demo><repeat list="&foo;">&li;--</repeat></demo>
  <dd> 
</dl>

<hr> <!-- ========================================================== -->
<h2>Tests</h2>

<alist>test equal sorted</alist>

<adscr>test</adscr>

<dl>
  <dt> <demo><test ></test></demo> (completely empty)
  <dd>  
  <dt> <demo><test > </test></demo> (space)
  <dd>  (any whitespace sounts as false)
  <dt> <demo><test> not blanks </test></demo>
  <dd> 
  <dt> <demo><test text > </test></demo>
  <dd> 
  <dt> <demo><test text > not blanks </test></demo>
  <dd> 
  <dt> <demo><test zero > 0 </test></demo>
  <dd> 
  <dt> <demo><test zero > xxx </test></demo>
  <dd> 
  <dt> <demo><test zero > 100 </test></demo>
  <dd>
  <dt> <demo><test zero > -100 </test></demo>
  <dd>
  <dt> <demo><test positive > 0 </test></demo>
  <dd>
  <dt> <demo><test positive> 100 </test></demo>
  <dd>
  <dt> <demo><test positive> -100 </test></demo>
  <dd>
  <dt> <demo><test negative > 0 </test></demo>
  <dd>
  <dt> <demo><test negative> 100 </test></demo>
  <dd>
  <dt> <demo><test negative> -100 </test></demo>
  <dd>
  <dt> <demo><test match="foo"> test match something  </test></demo>
  <dd>
  <dt> <demo><test match="foo"> test match foo something  </test></demo>
  <dd>
  <dt> <demo><test exact match="foo"> test match foo something  </test></demo>
  <dd>
  <dt> <demo><test exact match="foo">foo</test></demo>
  <dd>
</dl>

<adscr>equal</adscr>

<dl>
  <dt> <demo><equal>1 2</equal></demo>
  <dd> 
  <dt> <demo><equal>1 1</equal></demo>
  <dd> 
  <dt> <demo><equal><ul><li>1<li>1</ul></equal></demo>
  <dd> 
  <dt> <demo><equal><ul><li>1<li>3</ul></equal></demo>
  <dd> 
  <dt> <demo><equal>foo FoO</equal></demo>
  <dd> 
  <dt> <demo><equal case>foo FoO</equal></demo>
  <dd> 
</dl>

<adscr>sorted</adscr>

<dl>
  <dt> <demo><sorted>1 2 3</sorted></demo>
  <dd> 
  <dt> <demo><sorted>1 3 2</sorted></demo>
  <dd> 
  <dt> <demo><sorted reverse>5 4 3</sorted></demo>
  <dd> 
  <dt> <demo><sorted>10 2 3</sorted></demo>
  <dd> &lt;sorted&gt; normally tests for sortedness in
       <em>lexicographical</em> order.
  <dt> <demo><sorted numeric>10 2 3</sorted></demo>
  <dd> The <b>numeric</b> attribute is required to make it test in
       <em>numerical</em> order.
</dl>

<hr> <!-- ========================================================== -->
<h2>Numeric Processing</h2>

<alist>sum difference product quotient</alist>

<adscr>sum</adscr>

<dl>
  <dt> <demo><sum> </sum></demo>
  <dd> an empty list sums to zero
  <dt> <demo><sum>1 2 3</sum></demo>
  <dd> A list can contain plain text
  <dt> <demo><sum><it>1</it> <a name=foo>2</a> 3</sum></demo>
  <dd> markup
  <dt> <demo><sum><ul><li>1<li> 2<li> 3</ul></sum></demo>
  <dd> or a single list element
</dl>

<adscr>difference</adscr>

<dl>
  <dt> <demo><difference> </difference></demo>
  <dd> an empty list still ends up as zero
  <dt> <demo><difference>6 2</difference></demo>
  <dd> 
  <dt> <demo><difference>6 2 3</difference></demo>
  <dd> additional terms are subtracted
  <dt> <demo><difference>2 6</difference></demo>
  <dd> Negative numbers are handled.
</dl>

<adscr>product</adscr>

<dl>
  <dt> <demo><product>6 2 3</product></demo>
  <dd> 
</dl>

<adscr>quotient</adscr>

<dl>
  <dt> <demo><quotient>6 2</quotient></demo>
  <dd> 
  <dt> <demo><quotient>36 6 2</quotient></demo>
  <dd> additional terms are handled
  <dt> <demo><quotient>1 2</quotient></demo>
  <dd> Fractions are handled.
  <dt> <demo><quotient>1 0</quotient></demo>
  <dd> Division by zero is handled, though perhaps not gracefully
</dl>

<hr> <!-- ========================================================== -->
<h2>List Processing</h2>
<alist>sort</alist>

<adscr>sort</adscr>

<dl>
  <dt> <demo><sort>This is a test</sort></demo>
  <dd> 
  <dt> <demo><sort>7 5 35</sort></demo>
  <dd> 
  <dt> <demo><sort case>This is a test</sort></demo>
  <dd> 
  <dt> <demo><sort reverse>This is a test</sort></demo>
  <dd> 
  <dt> <demo><sort reverse>7 5 35</sort></demo>
  <dd> 
  <dt> <demo><sort numeric>7 5 35</sort></demo>
  <dd>
  <dt> <demo><sort numeric reverse>7 5 35</sort></demo>
  <dd>
</dl>

<hr> <!-- ========================================================== -->
<h2>String Processing</h2>
<alist>add-markup pad trim</alist>

<adscr>add-markup</adscr>


<adscr>pad</adscr>


<adscr>trim</adscr>


<hr> <!-- ========================================================== -->
<h2><a name="calendar">Calendar Operations</a></h2>
<alist>calendar calendar-day</alist>

<adscr>calendar</adscr>

<adscr>calendar-day</adscr>


<hr> <!-- ========================================================== -->
<h2>OS Operations</h2>
<alist>authenticate os-command os-command-output password-file-entry
       file read write</alist>

<adscr>authenticate</adscr>

<adscr>os-command</adscr>

<adscr>os-command-output</adscr>

<adscr>password-file-entry</adscr>

<dl>
  <dt> <demo><password-file-entry user=nobody password="nothing?"></demo>
  <dd> 
  <dt> <demo><password-file-entry user=nobody password="nothing?"
             >more:info</password-file-entry></demo>
  <dd> Note that a 12-bit random number is used as part of the
       password-generation process, so password-file-entry will rarely
       generate the same results twice even for the same password.<p>

       Passwords are case-sensitive, and are truncated to eight characters
       long. 
</dl>

<adscr>file</adscr>

<adscr>read</adscr>

<adscr>write</adscr>



<hr> <!-- ========================================================== -->
<h2><a name="agents">PIA Agents</a></h2>
<alist>agent-criteria agent-home agent-list agent-options
	agent-remove agent-running agent-set-criterion agent-set-options</alist>

<dl>
  <dt> Note:
  <dd> Some of these actors were defined before more general mechanisms were
       developed.  They are still useful, however, since they are usually
       shorter and faster than the general method.
</dl>

<adscr>agent-criteria</adscr>

<adscr>agent-home</adscr>

<adscr>agent-list</adscr>

<adscr>agent-options</adscr>

<adscr>agent-remove</adscr>

<adscr>agent-running</adscr>

<adscr>agent-set-criterion</adscr>

<adscr>agent-set-options</adscr>


<hr> <!-- ========================================================== -->
<h2><a name="forms">PIA Form processing</a></h2>
<alist>form submit-forms</alist>

<adscr>form</adscr>

<dl>
  <dt> 
  <dd> 
</dl>

<adscr>submit-forms</adscr>

<dl>
  <dt> 
  <dd> 
</dl>

<hr> <!-- ========================================================== -->
<h2><a name="actor-index">Actor Index</a></h2>
<ul foreach list="&actorNames;">
  <if><actor-dscr name="&li;"><then>
  <li> <a href="#&li;">&li;</a> -- &lt;<if><actor-dscr name="&li;">
       <then>actor</then><else>element</else></if></set>
       <actor-attrs name="&li;"> &gt; <br>
       <add-markup><actor-syntax name="&li;"></add-markup>
</ul>
  
<h2><a name="element-index">Element Index</a></h2>
<ul foreach list="&actorNames;">
  <if><actor-dscr name="&li;"><else>
  <li> &li; -- &lt;<if><actor-dscr name="&li;">
       <then>actor</then><else>element</else></if></set>
       <actor-attrs name="&li;"> &gt;
</ul>

<if><get name=agentName>
<then>
<hr>
<b>URL:</b> &lt;<a href="&url;">&url;</a>&gt;<br>
<b>Source:</b> <a href="/PIA/Agents/&agentName;/&fileName;">&fileName;</a>
<b>File:</b> <a href="/Root/&filePath;">&filePath;</a>
</then>
</if>
<hr>
<b>Copyright &copy; 1997 Ricoh California Research Center</b><br>
<b>$Id$</b>
</body></html>
