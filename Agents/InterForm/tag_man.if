<!doctype html public "-//IETF//DTD HTML//EN//2.0">
<html><head>
<title>&agentName; Standard Tagset Manual</title>
<link rev="made" href="mailto:steve@crc.ricoh.com"></link>
</head><body bgcolor="#ffffff" link="#c40026" vlink="#e40026">

<if><agent-running name=InterForm>
<then>
<!-- normal mode; running from the InterForm agent. -->
<set entity name=title>Standard Tagset Manual</set>
<read interform file="heading.inc" process>
<!-- references that change depending on where we are: -->
<set entity name=IFman>/PIA/Doc/Manuals/InterForm/index.html</set>
<set entity name=IFdemo>demo.if</set>

<table cellspacing=0 cellpadding=0 border=0>
<tr><th width=170 valign=center>
<td>
  <table cellspacing=0 cellpadding=0 border=0>
    <tr><th width=170><img src="/Agency/Icons/blank170x1.gif"
	                   width=170 height=1></th><td>
    <tr><th align=right>
	    <td> <a href="home.if">Home</a>
    		 <a href="index.if">Index</a>
    		 <a href="help.if">Help</a>
    		 <a href="options.if">Options</a>
    <tr><th><td> <a href=actors.if>Actors</a>
		 <a href=entities.if>Entities</a>
		 <a href="/Agency/agents.if">Agents</a>
    <tr><th align=right><img src="/Agency/Icons/dot-blue.gif"
			     height=20 width=20 alt="*">
            <td> <b href="tag_man.if">Standard Tagset Manual</b>
    <tr><th><td> <a href=demo.if>Standard Tagset Examples</a>
    <tr><th><td> <a href="&IFman;">PIA InterForm Manual</a>
  </table>
</table>
</then>
<else>
<!-- We are running this page through iffilter to make the tagset manual -->
<!-- WARNING! This document is automatically generated.  DO NOT EDIT. -->
<set entity name=IFman>tag_man.html</set>
<set entity name=IFdemo>examples.html</set>
<h1>Standard Tagset Manual</h1>
</else>
</if>

<!-- note that we must define actorNames in front of the local actor defs. -->

<set name=actorNames><actor-names></set>

<h3>About This Manual:</h3>

This is the official manual for the Standard Tagset.  It is available both as
an active document, generated by an InterForm in the <a
href="/InterForm/home.if">InterForm Demonstration agent</a>, and as part of
the <a href="/PIA/Doc/Manuals/InterForm/index.html">InterForm Manual</a>.  In
most cases, that will be faster, but is not always as up-to-date.<p>

<h3>Contents</h3>

<ul>
  <li> <a href="#introduction">Introduction</a>
  <li> <a href="#actors">Actor Definition and Control</a>
  <li> <a href="#expansion">Expansion Control</a>
  <li> <a href="#bindings">Name Bindings</a>
  <li> <a href="#control">Control Structure</a>
  <li> <a href="#tests">Tests</a>
  <li> <a href="#numeric">Numeric Processing</a>
  <li> <a href="#list">List Processing</a>
  <li> <a href="#string">String Processing</a>
  <li> <a href="#calendar">Calendar Operations</a>
  <li> <a href="#os">OS Operations</a>
  <li> <a href="#agents">PIA Agents</a>
  <li> <a href="#forms">PIA Form processing</a>

       <p>

  <li> <a href="#actor-index">Actor Index</a>
  <li> <a href="#element-index">Element Index</a>
</ul>

<!-- Define some utility actors, used mainly for layout: -->

<!-- The manual, and actor names linked to it -->
<actor tag=man dscr="Link an actor name to the manual">
  <set entity name=content><get name=content></set>
  <a href="&IFtags;#&content;">&content;</a>
</actor>
<actor tag=mtag dscr="``tag'' for actor named in CONTENT, pointing to manual">
  <set entity name=n><get name=content></set>
  &lt;<strong><man>&n;</man></strong> <actor-attrs name="&n;"> &gt;
</actor>

<!-- Name anchors in THIS page, and links to them. -->
<actor tag=toc dscr="Link an actor name to this page">
  <set entity name=content><get name=content></set>
  <a href="#&content;">&content;</a>
</actor>

<!-- The demo page, and actor names linked to it -->
<actor tag=demo dscr="Link an actor name to the manual">
  <set entity name=content><get name=content></set>
  <a href="&IFdemo;#&content;">&content;</a>
</actor>
<actor tag=atag dscr="``tag'' for actor named in CONTENT">
  <set entity name=n><get name=content></set>
  <set entity name=tag><if><actor-dscr name="&n;">
	<then>actor</then><else>element</else></if></set>
  &lt;&tag; <actor-attrs name="&n;"> &gt;
</actor>

<actor tag=name dscr="Make a name anchor">
  <set entity name=content><get name=content></set>
  <a name="&content;">&content;</a>
</actor>
<actor tag=atoc dscr="``tag'' for actor named in CONTENT">
  <set entity name=n><get name=content></set>
  <strong><toc>&n;</toc></strong> -- <atag>&n;</atag>
</actor>

<actor tag=adscr dscr="Make an actor description
cross-referenced to the manual.">
  <set entity name=name><get name=content></set>
  <hr><h3><a name="&name;">&name;</a></h3>
  <dl>
    <if><actor-dscr name="&name;"><then>
    <dt> <b>Syntax:</b>
    <dd> <add-markup><actor-syntax name="&name;"></add-markup>
    <dt> <b>Description:</b>
    <dd> <add-markup><actor-dscr name="&name;"></add-markup>
    </then></if>
    <dt> <b>Definition:</b>
    <dd> &lt;<b><if><actor-dscr name="&name;">
	 <then>actor</then><else>element</else></if></b>
	 <actor-attrs name="&name;">&gt;
    <if><actor-dscr name="&name;"><then>
    <dt> <b>See Also:</b>
    <dd> <a href="&IFdemo;#&name;">Examples</a>
    </then></if>
  </dl>
</actor>
<actor tag=alist dscr="Make a list of actor tags">
  <set entity name=list><get name=content></set>
<ul foreach list="&list;">
    <li> <atoc>&li;</atoc>
</ul>
</actor>

<actor tag=at dscr="shorthand for add-markup on an attribute name"
  ><add-markup><get name=content></add-markup></actor>
<actor tag=an dscr="presentation for  an actor name"
  >&lt;<b><set name=name><get name=content></set><a
       href="#&name;">&name;</a></b>&gt;</actor>

<h2><a name="introduction">Introduction</a></h2>

<h3>Format</h3>

Each major section of this manual is set off by a horizontal rule, followed by
a list of links to the individual actors described in it.  Each actor
description consists of a brief formatted description followed by an informal
discussion.   <p>

<blockquote>
Material that is less important (for example, implementation
and design notes) is indented, like this.
</blockquote>

The description consists of a definition list (<an>dl</an> element) with the
following items:

<dl>
  <dt> <b>Syntax</b>
  <dd> the formal syntax for a tag that invokes the actor, in ordinary
       extended-BNF notation.  Optional attributes are enclosed in [square
       brackets]; alternatives are separated by ``|''.  Regardless of the
       ordering of attributes in the syntax, attributes in an actual element
       can occur in any order.
  <dt> <b>Description</b>
  <dd> A brief text description, in which the names of the attributes are
       presented <at>THUS</at>.  (They are represented as
       all-uppercase words in the <at>DSCR</at> attribute, and
       processed by <an>add-markup</an>.)
  <dt> <b>Definition</b>
  <dd> The start tag of an <an>actor</an> element which one would use to
       <em>define</em> the given actor.  Note that the given <at>HANDLE</at>
       attribute is a Java class name usually derived automatically from the
       actor's name. 
  <dt> <b>See Also</b>
  <dd> A link to examples for this actor in <a
       href="&IFdemo;"><code>&IFdemo</code></a>.
</dl>
The attributes
in this tag are those that would be used to define the actor being described.
This is followed by a brief text description in which the names of attributes
in an <em>invocation</em> of the actor are presented in boldface.  The special
attributes <at>ELEMENT</at> and
<at>CONTENT</at> represent the entire invocation and its
content, respectively.  Actors with names that start with a letter match tags
with that name; actors with names that start with a '<code>-</code>' have more
complicated match criteria.<p>

<blockquote>
  There is a slight ambiguity in the text description between an attribute and
  its associated value.  It is usually clear from context.
</blockquote>

<blockquote>
  The description strings come from the value of the
  <at>DSCR</at> attribute of each actor; these are part of the
  <em>source code</em> that defines the actor, so they are usually the most
  up-to-date description available.
</blockquote>

<h3>Lists</h3>

Many operations take a <em>list</em> of items, either in their <at>CONTENT</at>
or as the value of an attribute.  The list may consist of either:

<ul>
  <li> A sequence of non-blank text items or tagged elements separated by
       whitespace (including newlines).
  <li> The list item (<an>li</an>) elements of an ordered (<an>ol</an>) or
       un-ordered (<an>ul</an>) list element.
  <li> The row (<an>tr</an>) elements of a <an>table</an>
  <li> The table data (<an>td</an>) and heading (<an>th</an>) elements of a
       table row (<an>tr</an>) element.
  <li> The paired <an>dt</an> and <an>dd</an> elements of a definition list
       (<an>dl</an>) element.
</ul>

In addition, some operations permit different item separators to be
defined.<p>

<h3>Associations</h3>

Some operations take a list of <em>associations</em>, or <em>pairs</em> of
items.  This may consist of either:

<ul>
  <li> An HTML query string consisting of
       <code><em>key</em>=<em>value</em></code> pairs separated by
       ampersand (<code>&amp;</code>) characters.  
  <li> The paired <an>dt</an> and <an>dd</an> elements of a definition list
       (<an>dl</an>) element.
  <li> A <an>table</an> element in which each row (<an>tr</an>) element is an
       asociation between its first data (<an>td</an>) or (more usually)
       heading (<an>th</an>) element and the rest of the row.
</ul>

In addition, some operations permit different pair and key-value separators to
be defined.<p>



<hr> <!-- ========================================================== -->
<h2><a name="actors">Actor Definition and Control</a></h2>
<alist>actor  actor-attrs actor-doc actor-dscr actor-names actor-syntax
element</alist> 

<adscr>actor</adscr>

<dl>
  <dt> 
  <dd> Actor names and tags are not case-sensitive; an actor must have either
       a <at>NAME</at> or a <at>TAG</at> attribute.  Many operations that
       distinguish actors from ordinary elements (for example, the actor index
       in this document) rely on the presence of a <at>DSCR</at> attribute to do
       so.
</dl>

<adscr>actor-attrs</adscr>

<dl>
  <dt> 
  <dd> The documentation attributes (<at>DSCR</at>, <at>DOC</at>,
       <at>SYNTAX</at>) are not returned by this operation; it is assumed that
       they will be retrieved by <an>actor-dscr</an>, <an>actor-doc</an>, and
       <an>actor-syntax</an> respectively, and presented to the user in a
       different format.
</dl>

<adscr>actor-doc</adscr>

<dl>
  <dt> 
  <dd> <em>This operation is presently unsupported in Release 0.9.</em><p>
       The eventual hope is that it will contain the additional documentation
       provided in this manual.
</dl>

<adscr>actor-dscr</adscr>

<dl>
  <dt> 
  <dd> Note that predefined actors (essentially, all those defined in this
       manual), get their <at>DSCR</at> data from their handler class rather
       than from an attribute.
</dl>

<adscr>actor-names</adscr>

<dl>
  <dt> 
  <dd> This operation retrieves the names of the actors defined <em>at the
       point in the InterForm where it is invoked.</em>
</dl>

<adscr>actor-syntax</adscr>

<dl>
  <dt> 
  <dd> Note that predefined actors (essentially, all those defined in this
       manual), get their <at>DSCR</at> data from their handler class rather
       than from an attribute.
</dl>

<adscr>element</adscr>


<hr> <!-- ========================================================== -->
<h2><a name="expansion">Expansion Control</a></h2>
<alist>expand process protect protect-result</alist>

<adscr>expand</adscr>

Causes the <at>CONTENT</at> to be ``expanded'' (processed by the InterForm
interpretor) a <em>second time</em> -- it will already have been processed
``in place'' once.


<adscr>process</adscr>

Unlike <an>expand</an>, <an>process</an> normally discards its results, unless
the <at>copy</at> attribute is provided.  <an>process</an> is usually done for
its side-effects. <p>

Inside a <an>form</an> element, <an>process</an> is normally expanded only if
the <an>form</an> is being ``processed'' -- i.e. a corresponding query has
been posted.  If the <an>process</an> has the <at>copy</at> attribute and the
<an>form</an> does not, the output of the <an>process</an> <em>replaces</em>
the <an>form</an> element.  <p>

If a <an>form</an> is <em>not</em> being processed, a <an>process</an>
tag will expand into
<pre>
   &lt;input name=name="id" value="form-<em>N</em>" type="hidden"&gt;
</pre>
where <em>N</em> is the value of the entity
<add-markup>&amp;forms;</add-markup>, which is incremented at the end of every
<an>form</an> element.<p>

The ``outside,'' unconditional behavior of ``process'' can be
enforced with the <at>anyway</at> attribute. <p>


<adscr>protect</adscr>

Cause the <at>CONTENT</at> not to be ``expanded'' (processed by the
InterForm interpretor) at all.


<adscr>protect-result</adscr>

This protects, not <at>CONTENT</at>, but the result of
<em>expanding</em> <at>CONTENT</at>.  It can be used,
for example, to prevent further processing of a file or computed text
that contains markup.  It is worth noting that <an>protect</an> and
<an>protect-result</an> perform the same operation (namely, replace the
actor element with its <at>CONTENT</at>); the only difference is whether
the <at>CONTENT</at> is expanded while it is being parsed.


<hr> <!-- ========================================================== -->
<h2><a name="bindings">Name Bindings</a></h2>
<alist>get set</alist>

<adscr>get</adscr>

<hr> <!-- ========================================================== -->
<h3>Specialized Versions</h3>
<alist>get.agent get.env get.form get.pia get.trans</alist>

<repeat list="get.agent get.env get.form get.pia get.trans">
    <adscr>&li;</adscr>
</repeat>

<adscr>set</adscr>

<hr> <!-- ========================================================== -->
<h3>Specialized Versions</h3>
<alist>set.agent set.env set.pia set.trans</alist>

<repeat list="set.agent set.env set.pia set.trans">
    <adscr>&li;</adscr>
</repeat>

 

<hr> <!-- ========================================================== -->
<h2><a name="control">Control Structure</a></h2>
<alist>if then else foreach -foreach- repeat</alist>

<adscr>if</adscr>

<adscr>then</adscr>

<adscr>else</adscr>


<adscr>foreach</adscr>

When <an>foreach</an> is a <em>tag</em> rather than an attribute,
only the <at>CONTENT</at>, of the <an>foreach</an> element is
returned, unlike the entire element as with the <em>attribute</em>
<at>FOREACH</at>.


<adscr>-foreach-</adscr>

When <at>FOREACH</at> is an <em>attribute</em> rather than a tag,
the element that contains it is returned rather than just its
<at>CONTENT</at>, as with the <em>tag</em> <an>foreach</an>.

<adscr>repeat</adscr>

<an>repeat</an> is just a synonym for <an>foreach</an>, but at some
point some additional functionality will be added.

<hr> <!-- ========================================================== -->
<h2><a name="tests">Tests</a></h2>

<alist>test equal sorted</alist>

<adscr>test</adscr>

Performs a test specified by the attributes, on the <at>CONTENT</at> of the
<an>test</an> element.  With no attributes, a <at>CONTENT</at> consisting only
of whitespace, HTML comments, and SGML declarations is considered
<em>false</em>; anything else is <em>true</em>.<p>

The following attributes modify the <em>result</em> of the test, which is
normally null for a <em>false</em> result and ``<code>1</code>'' for
<em>true</em>:

<dl>
  <dt> <at>NOT</at>
  <dd> reverses the <em>true</em> and <em>false</em> results.
  <dt> <at>IFFALSE</at>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>false</em>.
  <dt> <at>IFTRUE</at>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>true</em>.
</dl>

<adscr>equal</adscr>

Tests the list items in the <code>content</code> for equality.  Normally the
test is for string equality ignoring case.  The following attributes modify
the test:

<dl>
  <dt> <at>CASE</at> (sensitive)
  <dd> treat upper- and lower-case letters as different.
  <dt> <at>TEXT</at>
  <dd> Only compare the text portion of the <at>CONTENT</at> and ignore the
       markup. 
  <dt> <at>NUMERIC</at>
  <dd> Compare the text of the items numerically.  Items that do not begin
       with something that can be parsed as a number are compared as zero.
</dl>

The following attributes modify the <em>result</em> of the test, which is
normally null for a <em>false</em> result and ``<code>1</code>'' for
<em>true</em>:

<dl>
  <dt> <at>NOT</at>
  <dd> reverses the <em>true</em> and <em>false</em> results.
  <dt> <at>IFFALSE</at>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>false</em>.
  <dt> <at>IFTRUE</at>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>true</em>.
</dl>

<adscr>sorted</adscr>

Tests the list items in the <code>content</code> for sortedness.  Normally the
test is for string (lexical) comparison in ascending order, ignoring case.
The following attributes modify the test:

<dl>
  <dt> <at>CASE</at> (sensitive)
  <dd> treat upper- and lower-case letters as different.
  <dt> <at>TEXT</at>
  <dd> Only compare the text portion of the <at>CONTENT</at> and ignore the
       markup. 
  <dt> <at>NUMERIC</at>
  <dd> Compare the text of the items numerically.  Items that do not begin
       with something that can be parsed as a number are compared as zero.
  <dt> <at>REVERSE</at>
  <dd> Test for the items being in <em>descending</em> order.
</dl>

The following attributes modify the <em>result</em> of the test, which is
normally null for a <em>false</em> result and ``<code>1</code>'' for
<em>true</em>:

<dl>
  <dt> <at>NOT</at>
  <dd> reverses the <em>true</em> and <em>false</em> results.
  <dt> <at>IFFALSE</at>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>false</em>.
  <dt> <at>IFTRUE</at>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>true</em>.
</dl>



<hr> <!-- ========================================================== -->
<h2><a name="numeric">Numeric Processing</a></h2>
<alist>sum difference product quotient</alist>


<adscr>sum</adscr>

Takes a list of numeric values in <at>CONTENT</at> and replaces them with their
sum.  Markup is quietly ignored, as is any list item that cannot be
interpreted as a number.<p>

<adscr>difference</adscr>

Takes a list (<em>n1</em>, <em>n2</em>, ...) of numeric values in
<at>CONTENT</at> and replaces them with their (left-associated) difference
(<em>n1</em> - <em>n2</em> - ...).  Markup is quietly ignored, as is any list
item that cannot be interpreted as a number.<p>

<adscr>product</adscr>

Takes a list of numeric values in <at>CONTENT</at> and replaces them with their
product.  Markup is quietly ignored, as is any list item that cannot be
interpreted as a number.<p>

<adscr>quotient</adscr>

Takes a list (<em>n1</em>, <em>n2</em>, ...) of numeric values in
<at>CONTENT</at> and replaces them with their (left-associated) quotient
(<em>n1</em> / <em>n2</em> / ...).  Markup is quietly ignored, as is any list
item that cannot be interpreted as a number.<p>


<hr> <!-- ========================================================== -->
<h2><a name="list">List Processing</a></h2>
<alist>sort</alist>

<adscr>sort</adscr>


<hr> <!-- ========================================================== -->
<h2><a name="string">String Processing</a></h2>
<alist>add-markup pad trim</alist>

<adscr>add-markup</adscr>

Add markup to a text string (content type <code>text/plain</code>), using
conventions commonly used in e-mail, Usenet news, and programming.
Particularly useful for strings meant to go into attributes, since some
browsers and HTML parsers choke on markup inside attributes.<p>

<blockquote>
  Originally developed for the descriptions in the <at>DSCR</at> attributes of
  actors.
</blockquote>

<adscr>pad</adscr>

Add spaces to <at>CONTENT</at> to fill it out to a specified number of spaces.
<an>pad</an> can be useful for generating tables to be presented using the
<an>pre</an> tag, which is supported by <em>all</em> browsers (unlike
<an>table</an>, which some older browsers still don't support very well).
Used, for example, on the <a href="/Agency/agents.if">PIA's agent index</a>.<p>

<adscr>trim</adscr>

Essentially the opposite of <an>pad</an>; useful for cleaning up indentation
and line breaks inserted to make InterForm code easier to read in source form.
Note that spaces, tabs, and HTML comments are all considered whitespace.<p>


<hr> <!-- ========================================================== -->
<h2><a name="calendar">Calendar Operations</a></h2>
<alist>calendar calendar-day</alist>

<adscr>calendar</adscr>

<adscr>calendar-day</adscr>


<hr> <!-- ========================================================== -->
<h2><a name="os">OS Operations</a></h2>
<alist>authenticate os-command os-command-output password-file-entry
       file read write</alist>

<adscr>authenticate</adscr>

Presently this uses the Unix password file or the equivalent; the same kind of
file is used as the basic authentication method in most HTTP servers.  Entries
can be  constructed with the <an>password-file-entry</an> actor.<p>


<adscr>os-command</adscr>

<adscr>os-command-output</adscr>

<adscr>password-file-entry</adscr>

Constructs a Unix-style password file (<code>/etc/passwd</code>) entry for a
given username and password.  The other fields in the line can be generated,
but are ignored by the <an>authenticate</an> actor.<p>


<adscr>file</adscr>

This Actor is used to perform operations on files that do not require input
from the document; for example deletion, renaming, and file-to-file copying.<p>


<adscr>read</adscr>

The <an>read</an> operation can be performed on <em>either</em> files or
URL's. <p>


<adscr>write</adscr>

The <an>write</an> operation can be performed on <em>either</em> files or
URL's. <p>


<h3>Specialized Versions</h3>
<alist>read.file read.href write.file write.href</alist>

<repeat list="read.file read.href write.file write.href">
    <adscr>&li;</adscr>
</repeat>


<hr> <!-- ========================================================== -->
<h2><a name="agents">PIA Agents</a></h2>
<alist>agent-criteria agent-home agent-install agent-list agent-options
	agent-remove agent-running agent-set-criterion agent-set-options</alist>

<dl>
  <dt> Note:
  <dd> Some of these actors were defined before more general mechanisms were
       developed.  They are still useful, however, since they are usually
       shorter and faster than the general method.
</dl>

<adscr>agent-criteria</adscr>

<adscr>agent-home</adscr>

<adscr>agent-install</adscr>

<adscr>agent-list</adscr>

<adscr>agent-options</adscr>

<adscr>agent-remove</adscr>

<adscr>agent-running</adscr>

<adscr>agent-set-criterion</adscr>

<adscr>agent-set-options</adscr>

<hr> <!-- ========================================================== -->
<h2><a name="forms">PIA Form processing</a></h2>
<alist>form submit-forms</alist>

<adscr>form</adscr>

<adscr>submit-forms</adscr>

<hr> <!-- ========================================================== -->
<h2><a name="actor-index">Actor Index</a></h2>
<ul foreach list="&actorNames;">
  <if><actor-dscr name="&li;"><then>
  <li> <a href="#&li;">&li;</a> -- &lt;<if><actor-dscr name="&li;">
       <then>actor</then><else>element</else></if></set>
       <actor-attrs name="&li;"> &gt; <br>
       <add-markup><actor-syntax name="&li;"></add-markup>
</ul>
  
<h2><a name="element-index">Element Index</a></h2>
<ul foreach list="&actorNames;">
  <if><actor-dscr name="&li;"><else>
  <li> &li; -- &lt;<if><actor-dscr name="&li;">
       <then>actor</then><else>element</else></if></set>
       <actor-attrs name="&li;"> &gt;
</ul>
  

<if><agent-running name=InterForm>
<then>
<hr>
<b>URL:</b> &lt;<a href="&url;">&url;</a>&gt;<br>
<b>Source:</b> <a href="/PIA/Agents/&agentName;/&fileName;">&fileName;</a>
<b>File:</b> <a href="/Root/&filePath;">&filePath;</a>
</then>
</if>
<hr>
<b>Copyright &copy; 1997 Ricoh California Research Center</b><br>
<b>$Id$</b><br>
</body></html>
