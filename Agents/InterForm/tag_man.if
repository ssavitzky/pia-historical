<!doctype html public "-//IETF//DTD HTML//EN//2.0">
<html><head>
<title>Standard Tagset Manual</title>
<link rev="made" href="mailto:steve@crc.ricoh.com"></link>
</head><body bgcolor="#ffffff" link="#c40026" vlink="#e40026">

<set entity name=title>&agentName; Agent<br>Actor Demonstration Page</set>
<read interform file="heading.inc" process>

<set entity name=IFman>/PIA/Doc/Manuals/InterForm/index.html</set>
<table align=center cellspacing=0 cellpadding=0 border=0>
<tr><th width=170 valign=center>
<td>
  <table cellspacing=0 BORDER=0>
  <tr><th align=right width=170>&nbsp;<td>
  <tr>
    <th valign=top align=right width=170>
    <td valign=top> Demonstration and Test agent
  <tr><th align=right><a href="/&agentName;"><b>&agentName;:</b></a>
          <td> <a href=demo.if>Demo page</a>
  <tr><th><td> <a href=actors.if>Defined InterForm Actors</a>
  <tr><th><td> <a href=entities.if>Defined Entities</a>
  <tr><th><td> <a href=/Agency/agents.if>Running PIA Agents</a>
  <tr><th><td> <a href="&IFman;">PIA InterForm Manual</a>
  </table>
</table>
 
<h3>About This Manual:</h3>

This will eventually be the <em>official</em> manual for the Standard Tagset.
It is an active document, generated by an InterForm in the <a
href="home.if">InterForm Demonstration agent</a>.  A non-active version can be
found as part of the <a href="/PIA/Doc/Manuals/InterForm/index.html">InterForm
Manual</a>.  In most cases, that will be faster.<p>

<p>

<h3>Actor Index</h3>
<!-- note that we must define actorNames in front of the local actor defs. -->

<set name=actorNames><actor-names></set>
<menu foreach list="&actorNames;">
  <if><actor-dscr name="&li;"><then>
  <li> <a href="#&li;">&li;</a>
</menu>
  
<!-- Define some utility actors, used mainly for layout: -->

<!-- The manual, and actor names linked to it -->
<set entity name=IFman>/PIA/Doc/Manuals/InterForm/index.html</set>
<actor tag=man dscr="Link an actor name to the manual">
  <set entity name=content><get name=content></set>
  <a href="&IFman;#&content;">&content;</a>
</actor>
<actor tag=mtag dscr="``tag'' for actor named in CONTENT, pointing to manual">
  <set entity name=n><get name=content></set>
  &lt;<strong><man>&n;</man></strong> <actor-attrs name="&n;"> &gt;
</actor>

<!-- Name anchors in THIS page, and links to them. -->
<actor tag=toc dscr="Link an actor name to this page">
  <set entity name=content><get name=content></set>
  <a href="#&content;">&content;</a>
</actor>

<!-- The demo page, and actor names linked to it -->
<set entity name=IFdemo>/if_demo/demo.if</set>
<actor tag=demo dscr="Link an actor name to the manual">
  <set entity name=content><get name=content></set>
  <a href="&IFdemo;#&content;">&content;</a>
</actor>
<actor tag=atag dscr="``tag'' for actor named in CONTENT">
  <set entity name=n><get name=content></set>
  <set entity name=tag><if><actor-dscr name="&n;">
	<then>actor</then><else>element</else></if></set>
  &lt;&tag; <actor-attrs name="&n;"> &gt;
</actor>

<actor tag=name dscr="Make a name anchor">
  <set entity name=content><get name=content></set>
  <a name="&content;">&content;</a>
</actor>
<actor tag=atoc dscr="``tag'' for actor named in CONTENT">
  <set entity name=n><get name=content></set>
  <strong><toc>&n;</toc></strong> -- <atag>&n;</atag>
</actor>

<actor tag=adscr dscr="Make an actor description
cross-referenced to the manual.">
  <set entity name=name><get name=content></set>
  <h3><a name="&name;">&name;</a></h3>
  <dl>
    <dt> <b>Syntax:</b>
    <dd> <add-markup><actor-syntax name="&name;"></add-markup>
    <dt> <b>Description:</b>
    <dd> <add-markup><actor-dscr name="&name;"></add-markup>
    <dt> <b>Definition:</b>
    <dd> &lt;actor <actor-attrs name="&name;">&gt;
    <dt> <b>See Also:</b>
    <dd> <a href="/InterForm/demo.if#&name;">Examples</a>
  </dl>
</actor>
<actor tag=alist dscr="Make a list of actor tags">
  <set entity name=list><get name=content></set>
<ul foreach list="&list;">
    <li> <atoc>&li;</atoc>
</ul>
</actor>


<h3>Format</h3>

Each major section of this manual is set off by a horizontal rule, followed by
a list of links to the individual actors described in it.  Each actor
description consists of a brief formatted description followed by an informal
discussion.   <p>

<blockquote>
Material that is less important (for example, implementation
and design notes) is indented, like this.
</blockquote>

The formatted description looks like an HTML start tag; the name of the actor
is a link to the examples for that actor in <a
href="/InterForm/demo.if">/InterForm/demo.if</a>.  The attributes
in this tag are those that would be used to define the actor being described.
This is followed by a brief text description in which the names of attributes
in an <em>invocation</em> of the actor are presented in boldface.  The special
attributes <add-markup>ELEMENT</add-markup> and
<add-markup>CONTENT</add-markup> represent the entire invocation and its
content, respectively.  Actors with names that start with a letter match tags
with that name; actors with names that start with a '<code>-</code>' have more
complicated match criteria.<p>

<blockquote>
  There is a slight ambiguity in the text description between an attribute and
  its associated value.  It is usually clear from context.
</blockquote>

<blockquote>
  The description strings come from the value of the
  <add-markup>DSCR</add-markup> attribute of each actor; these are part of the
  <em>source code</em> that defines the actor, so they are usually the most
  up-to-date description available.
</blockquote>

<h3>Lists</h3>

Many operations take a <em>list</em> of items, either in their <b>content</b>
or as the value of an attribute.  The list may consist of either:

<ul>
  <li> A sequence of non-blank text items or tagged elements separated by
       whitespace (including newlines).
  <li> The list item (&lt;li&gt;) elements of an ordered (&lt;ol&gt;) or
       un-ordered (&lt;ul&gt;) list element.
  <li> The row (&lt;tr&gt;) elements of a &lt;table&gt;
  <li> The table data (&lt;td&gt;) and heading (&lt;th&gt;) elements of a
       table row (&lt;tr&gt;) element.
  <li> The paired &lt;dt&gt; and &lt;dd&gt; elements of a definition list
       (&lt;dl&gt;) element.
</ul>

In addition, some operations permit different item separators to be
defined.<p>

<h3>Associations</h3>

Some operations take a list of <em>associations</em>, or <em>pairs</em> of
items.  This may consist of either:

<ul>
  <li> An HTML query string consisting of
       <code><em>key</em>=<em>value</em></code> pairs separated by
       ampersand (<code>&amp;</code>) characters.  
  <li> The paired &lt;dt&gt; and &lt;dd&gt; elements of a definition list
       (&lt;dl&gt;) element.
  <li> A &lt;table&gt; element in which each row (&lt;tr&gt;) element is an
       asociation between its first data (&lt;td&gt;) or (more usually)
       heading (&lt;th&gt;) element and the rest of the row.
</ul>

In addition, some operations permit different pair and key-value separators to
be defined.<p>



<hr> <!-- ========================================================== -->
<h2>Actor Definition and Control</h2>
<alist>actor  actor-names actor-attrs actor-doc actor-dscr actor-syntax</alist>

<adscr>actor</adscr>
  
<adscr>actor-names</adscr>

<adscr>actor-attrs</adscr>

<adscr>actor-doc</adscr>

<adscr>actor-dscr</adscr>

<adscr>actor-syntax</adscr>



<hr> <!-- ========================================================== -->
<h2>Expansion Control</h2>
<alist>expand protect protect-result</alist>

<adscr>expand</adscr>

Cause the <b>content</b> to be ``expanded'' (processed by the InterForm
interpretor) a <em>second time</em> -- it will already have been processed
``in place'' once.<p>

<adscr>protect</adscr>

Cause the <b>content</b> not to be ``expanded'' (processed by the InterForm
interpretor) at all.<p>

<adscr>protect-result</adscr>

This protects, not <add-markup>CONTENT</add-markup>, but the result of
<em>expanding</em> <add-markup>CONTENT</add-markup>.  It can be used, for
example, to prevent further processing of a file or computed text that
contains markup.  It is worth noting that &lt;protect&gt; and
&lt;protect-result&gt; perform the same operation (namely, replace the actor
element with its <b>content</b>); the only difference is whether the
<b>content</b> is expanded while it is being parsed.<p>


<hr> <!-- ========================================================== -->
<h2>Name Bindings</h2>

<alist>get set</alist>

<adscr>get</adscr>
  

<adscr>set</adscr>

<hr> <!-- ========================================================== -->
<h2>Control Structure</h2>

<alist>if then else repeat -foreach-</alist>

<adscr>if</adscr>

<adscr>then</adscr>

<adscr>else</adscr>


<adscr>repeat</adscr>


<adscr>-foreach-</adscr>

<hr> <!-- ========================================================== -->
<h2>Tests</h2>

<alist>test equal sorted</alist>

<adscr>test</adscr>

Performs a test specified by the attributes, on the <b>content</b> of the
&lt;test&gt; element.  With no attributes, a <b>content</b> consisting only of
whitespace, HTML comments, and SGML declarations is considered <em>false</em>;
anything else is <em>true</em>.<p>

The following attributes modify the <em>result</em> of the test, which is
normally null for a <em>false</em> result and ``<code>1</code>'' for
<em>true</em>:

<dl>
  <dt> <b>not</b>
  <dd> reverses the <em>true</em> and <em>false</em> results.
  <dt> <b>iffalse</b>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>false</em>.
  <dt> <b>iftrue</b>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>true</em>.
</dl>

<adscr>equal</adscr>

Tests the list items in the <code>content</code> for equality.  Normally the
test is for string equality ignoring case.  The following attributes modify
the test:

<dl>
  <dt> <b>case</b> (sensitive)
  <dd> treat upper- and lower-case letters as different.
  <dt> <b>text</b>
  <dd> Only compare the text portion of the <b>content</b> and ignore the
       markup. 
  <dt> <b>numeric</b>
  <dd> Compare the text of the items numerically.  Items that do not begin
       with something that can be parsed as a number are compared as zero.
</dl>

The following attributes modify the <em>result</em> of the test, which is
normally null for a <em>false</em> result and ``<code>1</code>'' for
<em>true</em>:

<dl>
  <dt> <b>not</b>
  <dd> reverses the <em>true</em> and <em>false</em> results.
  <dt> <b>iffalse</b>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>false</em>.
  <dt> <b>iftrue</b>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>true</em>.
</dl>

<adscr>sorted</adscr>

Tests the list items in the <code>content</code> for sortedness.  Normally the
test is for string (lexical) comparison in ascending order, ignoring case.
The following attributes modify the test:

<dl>
  <dt> <b>case</b> (sensitive)
  <dd> treat upper- and lower-case letters as different.
  <dt> <b>text</b>
  <dd> Only compare the text portion of the <b>content</b> and ignore the
       markup. 
  <dt> <b>numeric</b>
  <dd> Compare the text of the items numerically.  Items that do not begin
       with something that can be parsed as a number are compared as zero.
  <dt> <b>reverse</b>
  <dd> Test for the items being in <em>descending</em> order.
</dl>

The following attributes modify the <em>result</em> of the test, which is
normally null for a <em>false</em> result and ``<code>1</code>'' for
<em>true</em>:

<dl>
  <dt> <b>not</b>
  <dd> reverses the <em>true</em> and <em>false</em> results.
  <dt> <b>iffalse</b>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>false</em>.
  <dt> <b>iftrue</b>="<em>string</em>"
  <dd> return <em>string</em> if the result of the test is <em>true</em>.
</dl>



<hr> <!-- ========================================================== -->
<h2>Numeric Processing</h2>
<alist>sum difference product quotient</alist>


<adscr>sum</adscr>

Takes a list of numeric values in <b>content</b> and replaces them with their
sum.  Markup is quietly ignored, as is any list item that cannot be
interpreted as a number.<p>

<adscr>difference</adscr>

Takes a list (<em>n1</em>, <em>n2</em>, ...) of numeric values in
<b>content</b> and replaces them with their (left-associated) difference
(<em>n1</em> - <em>n2</em> - ...).  Markup is quietly ignored, as is any list
item that cannot be interpreted as a number.<p>

<adscr>product</adscr>

Takes a list of numeric values in <b>content</b> and replaces them with their
product.  Markup is quietly ignored, as is any list item that cannot be
interpreted as a number.<p>

<adscr>quotient</adscr>

Takes a list (<em>n1</em>, <em>n2</em>, ...) of numeric values in
<b>content</b> and replaces them with their (left-associated) quotient
(<em>n1</em> / <em>n2</em> / ...).  Markup is quietly ignored, as is any list
item that cannot be interpreted as a number.<p>


<hr> <!-- ========================================================== -->
<h2>List Processing</h2>

<hr> <!-- ========================================================== -->
<h2>String Processing</h2>

<alist>add-markup pad trim</alist>

<adscr>add-markup</adscr>

Add markup to a text string (content type <code>text/plain</code>), using
conventions commonly used in e-mail, Usenet news, and programming.
Particularly useful for strings meant to go into attributes, since some
browsers and HTML parsers choke on markup inside attributes.<p>

<blockquote>
  Originally developed for the descriptions in the
  <add-markup>DSCR</add-markup> attributes of actors.
</blockquote>

<adscr>pad</adscr>

Add spaces to <b>content</b> to fill it out to a specified number of spaces.
&lt;pad&gt; can be useful in 


<adscr>trim</adscr>


<hr> <!-- ========================================================== -->
<h2>PIA Agents</h2>

<alist>agent-home agent-install agent-list agent-options agent-remove
       agent-running agent-set-options</alist>

<dl>
  <dt> Note:
  <dd> Some of these actors were defined before more general mechanisms were
       developed.  They are still useful, however, since they are usually
       shorter and faster than the general method.
</dl>

<adscr>agent-home</adscr>

<adscr>agent-install</adscr>

<adscr>agent-list</adscr>

<adscr>agent-options</adscr>

<adscr>agent-remove</adscr>

<adscr>agent-running</adscr>

<adscr>agent-set-options</adscr>

<hr> <!-- ========================================================== -->
<h2>OS Operations</h2>

<adscr>os-command</adscr>

<adscr>os-command-output</adscr>




<hr>
<b>URL:</b> &lt;<a href="&url;">&url;</a>&gt;<br>
<b>Source:</b> <a href="/PIA/Agents/&agentName;/&fileName;">&fileName;</a>
<b>File:</b> <a href="/Root/&filePath;">&filePath;</a>
<hr>
<b>Copyright &copy; 1997 Ricoh California Research Center</b><br>
<b>$Id$</b><br>
</body></html>
